;;;; conflog-test.lisp

(in-package #:conflog-test)

;;; "conflog-test" goes here. Hacks and glory await!

;;; Define
(defmacro define-conflog-test (name (&rest rules) &rest asserts)
  (let ((index 0))
    (declare (ignorable index))
    `(deftest ,name
	 (with-rules (,@rules)
	   ,@(mapcar (lambda (assert)
		       `(progn
			  #+conflog-debug
			  (format t "~&Test ~A.~D~&----------~&Rules:~{~&  ~S~}~&Ask:~&  ~A~&Expected:~&  ~A~&Log:~%"
				  ',name ,(incf index) ',rules ',(first assert) ',(second assert))
			  ,(first assert))) asserts))
       ,(mapcar #'second asserts))))

;;; Tests

;;; true/fail test
(define-conflog-test T1 ((:- (A on) true))
  ((?- (A on)) t)
  ((?- (A ?what)) ((?what . on))))

(define-conflog-test T2 ((:- (A on) fail))
  ((?- (A on)) nil))

;;; backtracking test
(define-conflog-test T3 ((:- (A ?what) (B ?what))
			 (:- (B ?what) (status B ?what)))
  ((with-status ((B . on))
     (?- (A on)))
   t)
  ((with-status ((B . off))
     (?- (A ?what)))
   ((?what . off))))

(define-conflog-test T4 ((:- (A ?what) (B ?what))
			 (:- (B ?what) (C ?what))
			 (:- (C ?what) (D on) (= ?what off))
			 (:- (C ?what) (D off) (= ?what on))
			 (:- (D ?what) (status D ?what)))
  ((with-status ((D . on))
     (?- (A off) (B off) (C off))) 
   t)
  ((with-status ((D . off))
     (?- (A ?whatA) (B ?whatB) (C ?whatC))) 
   ((?whatA . on) (?whatB . on) (?whatC . on))))

;;; primitive test
(define-conflog-test T5 ((:- (A on) (status B ?what) (member ?what (A B C D))))
  ((?- (sstatus B A) (A on)) t)
  ((?- (sstatus B B) (A on)) t)
  ((?- (sstatus B D) (A on)) t)
  ((?- (sstatus B W) (A on)) nil))

(define-conflog-test T6 ((:- (A ?what) (status A ?what)))
  ((?- (sstatus A on) (A ?what)) ((?what . on))))

(define-conflog-test T7 ((:- (A ?what) (B ?what))
			 (:- (B ?what) (status B ?what)))
  ((?- (sstatus B on) (A ?what)) ((?what . on)))
  ((?- (sstatus A off) (sstatus B on) (A ?what)) ((?what . off)))
  ((?- (sstatus A off) (sstatus B on)
       (status A ?what1)
       (A ?what2)
       (apply (A ?what3))
       (status A ?what4)
       (A ?what5))
   ((?what1 . off)
    (?what2 . off)
    (?what3 . on)
    (?what4 . on)
    (?what5 . on))))

(define-conflog-test T8 ((:- (A ?what) (init-status A ?what)))
  ((progn (setup-init-status '((A . on)))
	  (?- (A ?what1)
	      (sstatus A off)
	      (status A ?what2)
	      (prev-status A ?what3)))
   ((?what1 . on) (?what2 . off) (?what3 . on))))

(define-conflog-test T9 ((:- (A on) (B off))
			 (:- (A off) (B on))
			 (:- (B ?what) (init-status B ?what)))
  ((progn (setup-init-status '((B . on)))
	  (setup-status '((B . off)))
	  (?- (apply (B ?what)))
	  (?- (A ?what)))
   ((?what . off))))

;;; propogate test
(define-conflog-test T10 ((:- (A on) (B off))
			  (:- (A off) (B on))
			  (:- (B ?what) (status B ?what)))
  ((progn (?- (sstatus B on) (maybe-propogate-sstatus B off))
	  (?- (A ?what)))
   ((?what . on))))

(define-conflog-test T11 ((:- (A on) (B off))
			  (:- (A off) (B on))
			  (:- (C on) (A on))
			  (:- (B ?what) (status B ?what))
			  (:- (C off) true))
  ((with-status ((B . on) (A . off))
     (?- (maybe-propogate-sstatus B off))
     (?- (C ?what)))
   ((?what . on)))
  ((with-status ((B . on))
     (?- (maybe-propogate-sstatus B off)
	 (maybe-propogate-sstatus B on))
     (?- (apply (C ?what))))
   ((?what . off))))

(define-conflog-test T12 ((:- (A on) (B off) (C on))
			  (:- (A off) true)
			  (:- (D on) (or (and (A on) (C ?what) (member ?what (off)))
					 (and (A off) (C off) (B off))))
			  (:- (D ?what) (B ?what))
			  (:- (B ?what) (status B ?what))
			  (:- (C ?what) (status C ?what)))
  ((with-status ((B . on) (C . on))
     (append (?- (A ?whatA) (D ?whatD) (maybe-propogate-sstatus B off))
	     (?- (A ?whatA2) (D ?whatD2))))
   ((?whatA . off) (?whatD . on) (?whatA2 . on) (?whatD2 . off)))
  ((with-status ((B . off) (C . off))
     (append (?- (A ?whatA) (D ?whatD) (maybe-propogate-sstatus C on))
	     (?- (A ?whatA2) (D ?whatD2))))
   ((?whatA . off) (?whatD . on) (?whatA2 . on) (?whatD2 . off))))

(define-conflog-test T13 ((:- (A 1) (^ B) (B off))
			  (:- (A 2) (B off))
			  (:- (A 3) true)
			  (:- (B ?what) (C ?what))
			  (:- (C ?what) (status C ?what)))
  ((with-status ((C . on) (B . on))
     (append (?- (A ?whatA) (maybe-propogate-sstatus C off))
	     (?- (A ?whatA2))))
   ((?whatA . 3) (?whatA2 . 1)))
  ((with-status ((B . off))
     (append (?- (A ?whatA) (sstatus B off) (propogate B))
	     (?- (A ?whatA2))))
   ((?whatA . 2) (?whatA2 . 1))))

(define-conflog-test T14 ((:- ($TMP_MixedAvailPaperSize (A4 A5 A3 LETTER LEDGER P11X17 TABLOID LEGAL B4 B5)) true)
			  (:- ($FNS_MixedPaperPrint GRAY) (Layout$PageSize ?PAPER) ($TMP_MixedAvailPaperSize ?LIST) (not (member ?PAPER ?LIST)) (sstatus $VAL_MixedPaperPrint OFF))
			  (:- (Layout$PageSize ?what) (status Layout$PageSize ?what))
			  (:- ($VAL_MixedPaperPrint ?what) (status $VAL_MixedPaperPrint ?what)))
  
  ((with-status (($VAL_MixedPaperPrint . ON) ($FNS_MixedPaperPrint . ON) (Layout$PageSize . A0))
     (list
      (get-status '$FNS_MixedPaperPrint)
      (get-status '$VAL_MixedPaperPrint)
      (refresh-status/resolve '$FNS_MixedPaperPrint)
      (get-status '$VAL_MixedPaperPrint)))
   (ON ON GRAY OFF))
  ((with-status (($VAL_MixedPaperPrint . ON) ($FNS_MixedPaperPrint . ON) (Layout$PageSize . A0))
     (list
      (get-status '$FNS_MixedPaperPrint)
      (get-status '$VAL_MixedPaperPrint)
      (progn (resolve 'Layout$PageSize)
	     (get-status '$FNS_MixedPaperPrint))
      (get-status '$VAL_MixedPaperPrint)))
   (ON ON GRAY OFF))
  ((with-status (($VAL_MixedPaperPrint . ON) ($FNS_MixedPaperPrint . ON) (Layout$PageSize . A3))
     (list
      (get-status '$FNS_MixedPaperPrint)
      (get-status '$VAL_MixedPaperPrint)
      (progn (set-status/resolve 'Layout$PageSize 'A0)
	     (get-status '$FNS_MixedPaperPrint))
      (get-status '$VAL_MixedPaperPrint)))
   (ON ON GRAY OFF)))

;;; not/and/or test
(define-conflog-test T15 ((:- (A on) (not (B on)))
			  (:- (A off) true)
			  (:- (B off) true))
  ((with-status ((B . on))
     (?- (A ?what)))
   ((?what . off))))

(define-conflog-test T16 ((:- (A on) (not (true)))
			  (:- (A off) true))
  ((?- (A ?what))
   ((?what . off))))

(define-conflog-test T17 ((:- (A ?what) (B ?what) (not (= ?what on)))
			  (:- (A off))
			  (:- (B on)))
  ((?- (A ?what))
   ((?what . off))))

(define-conflog-test T18 ((:- (A on) (not (not (not (true)))))
			  (:- (A ?what) (B ?what) (not (not (not (not (= ?what off))))))
			  (:- (B off) true)
			  (:- (A unknown) true))
  ((?- (A ?what))
   ((?what . off))))

(define-conflog-test T19 ((:- (string-empty yes) (string ""))
			  (:- (string-empty no))
			  (:- (string ?what) (not (= ?what "not empty")))
			  (:- (string ""))
			  (:- (string-equal yes) (stringA ?what) (stringB ?that) (= ?what ?that))
			  (:- (stringA "Hello World!"))
			  (:- (stringB "Hello World!"))
			  (:- (string-equal no)))
  ((?- (string-empty ?empty) (string-equal ?equal))
   ((?empty . yes) (?equal . yes))))

(define-conflog-test T20 ((:- (A on) (not (B on)))
			  (:- (A off))
			  (:- (B ?what) (status B ?what)))
  ((?- (sstatus B on) (A ?what))
   ((?what . off)))
  ((?- (sstatus B off) (A ?what))
   ((?what . on)))
  ((list (?- (not true))
	   (?- (not fail))
	   (?- (not (or true fail)))
	   (?- (not (or fail true)))
	   (?- (not (or true true)))
	   (?- (not (or fail fail)))
	   (?- (not (and true fail)))
	   (?- (not (and fail true)))
	   (?- (not (and true true)))
	   (?- (not (and fail fail)))
	   (?- (not (not (or fail true))))
	   )
   (nil t nil nil nil t t t nil t t)))

(define-conflog-test T21 ((:- (A ?what) (B ?off) (or (== ?off off) (== ?off disable)) (= ?what on))
			  (:- (B off))
			  (:- (A off)))
  ((?- (A ?what))
   ((?what . on))))

;;; Fixme: Smells like not correct
;; (define-conflog-test T21 ((:- (A ?what)  (or (and (B ?off) (== ?off off)) (and (B ?off) (== ?off disable))) (= ?what on))
;; 			  (:- (B off))
;; 			  (:- (A off)))
;;   ((?- (A ?what))
;;    ((?what . off))))

;;; anonymouse test
(define-conflog-test T22 ((:- ($$ ?) (A ?any) (lisp (setf *A* 1)))
			  (:- ($$ ?) (lisp (setf *A* 2)))
			  (:- ($$ ?) (lisp (setf *A* 3)))
			  (:- ($$ ?) (lisp (setf *A* 4)))
			  (:- (A on)))
  ((progn (defvar *A* 0) (resolve 'A) *A*)
   1))

(define-conflog-test T23 ((:- ($$ ?) (A ?any) (lisp (setf *A* 1)))
			  (:- ($$ ?) (lisp (setf *A* 2)))
			  (:- ($$ ?) (A ?any) (lisp (setf *A* 3)))
			  (:- ($$ ?) (lisp (setf *A* 4)))
			  (:- (A on)))
  ((progn (defvar *A* 0) (resolve 'A) *A*)
   3))

(define-conflog-test T24 ((:- (__ ?) (A ?any) (lisp (setf *A* 1)))
			  (:- (__ ?) (lisp (setf *A* 2)))
			  (:- (__ ?) (lisp (setf *A* 3)))
			  (:- (__ ?) (lisp (setf *A* 4)))
			  (:- (A on)))
  ((progn (defvar *A* 0) (resolve 'A) *A*)
   4))

(define-conflog-test T25 ((:- (__ ?) (A ?) (lisp (setf *A* 1)))
			  (:- (__ ?) (lisp (setf *A* 2)))
			  (:- (__ ?) (lisp (setf *A* 3)))
			  (:- (__ ?) (lisp (setf *A* 4)))
			  (:- (A on)))
  ((progn (defvar *A* 0) (resolve 'A) *A*)
   1))

(define-conflog-test T26 ((:- (__ ?) (A ?any) (lisp (setf *A* 1)))
			  (:- (__ ?) (lisp (setf *A* 2)))
			  (:- (__ ?) (A ?) (lisp (setf *A* 3)))
			  (:- (__ ?) (lisp (setf *A* 4)))
			  (:- (A on)))
  ((progn (defvar *A* 0) (resolve 'A) *A*)
   3))